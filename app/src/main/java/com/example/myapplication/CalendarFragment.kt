package com.example.myapplication

import android.app.AlertDialog
import android.app.DatePickerDialog
import android.app.TimePickerDialog
import android.graphics.Color
import android.os.Bundle
import android.view.*
import android.widget.*
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.material.chip.Chip
import com.google.android.material.chip.ChipGroup
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.Timestamp
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.*

class CalendarFragment : Fragment() {

    private lateinit var rootView: View
    private lateinit var calendarView: CalendarView
    private lateinit var eventsRecyclerView: RecyclerView
    private lateinit var eventsAdapter: CalendarEventsAdapter
    private lateinit var addEventFab: FloatingActionButton
    private lateinit var monthYearText: TextView
    private lateinit var todayButton: Button
    private lateinit var userTypeIndicator: TextView

    private val db = FirebaseFirestore.getInstance()
    private val events = mutableListOf<CalendarEvent>()
    private val spendingData = mutableMapOf<String, List<SpendingData>>()

    private var selectedDate = Calendar.getInstance()
    private var isGoogleUser = false
    private var googleCalendarHelper: GoogleCalendarHelper? = null

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        rootView = createCalendarLayout()
        return rootView
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        initializeComponents()
        checkUserType()
        setupCalendar()
        setupRecyclerView()
        setupEventListeners()
        loadInitialData()
    }

    private fun createCalendarLayout(): View {
        val context = requireContext()

        // Î©îÏù∏ Ïä§ÌÅ¨Î°§Î∑∞
        val scrollView = ScrollView(context).apply {
            setBackgroundColor(Color.parseColor("#F8F9FA"))
        }

        val mainLayout = LinearLayout(context).apply {
            orientation = LinearLayout.VERTICAL
        }

        // ÏÉÅÎã® Ìó§Îçî
        val headerLayout = createHeaderLayout()

        // Ï∫òÎ¶∞Îçî Ïª®ÌÖåÏù¥ÎÑà
        val calendarContainer = createCalendarContainer()

        // ÏÑ†ÌÉùÎêú ÎÇ†Ïßú Ï†ïÎ≥¥
        val selectedDateInfo = createSelectedDateInfo()

        // Ïù¥Î≤§Ìä∏ Î™©Î°ù
        val eventsSection = createEventsSection()

        // FAB
        addEventFab = FloatingActionButton(context).apply {
            setImageResource(android.R.drawable.ic_input_add)
            setBackgroundColor(Color.parseColor("#1976D2"))
            layoutParams = ViewGroup.MarginLayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT,
                ViewGroup.LayoutParams.WRAP_CONTENT
            ).apply {
                setMargins(0, 32, 32, 32)
            }
        }

        mainLayout.addView(headerLayout)
        mainLayout.addView(calendarContainer)
        mainLayout.addView(selectedDateInfo)
        mainLayout.addView(eventsSection)

        scrollView.addView(mainLayout)

        // FABÎ•º Î≥ÑÎèÑÎ°ú Ï∂îÍ∞ÄÌïòÍ∏∞ ÏúÑÌïú FrameLayout
        val frameLayout = FrameLayout(context)
        frameLayout.addView(scrollView)
        frameLayout.addView(addEventFab, FrameLayout.LayoutParams(
            FrameLayout.LayoutParams.WRAP_CONTENT,
            FrameLayout.LayoutParams.WRAP_CONTENT,
            android.view.Gravity.BOTTOM or android.view.Gravity.END
        ))

        return frameLayout
    }

    private fun createHeaderLayout(): View {
        val context = requireContext()

        val headerCard = androidx.cardview.widget.CardView(context).apply {
            radius = 0f
            cardElevation = 4f
            setCardBackgroundColor(Color.WHITE)
        }

        val headerLayout = LinearLayout(context).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(48, 48, 48, 32)
        }

        // Ï†úÎ™©Í≥º ÏÇ¨Ïö©Ïûê ÌÉÄÏûÖ
        val titleLayout = LinearLayout(context).apply {
            orientation = LinearLayout.HORIZONTAL
            gravity = Gravity.CENTER_VERTICAL
        }

        val titleText = TextView(context).apply {
            text = "üìÖ Ïä§ÎßàÌä∏ Ï∫òÎ¶∞Îçî"
            textSize = 24f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setTextColor(Color.parseColor("#212121"))
            layoutParams = LinearLayout.LayoutParams(
                0, ViewGroup.LayoutParams.WRAP_CONTENT, 1f
            )
        }

        userTypeIndicator = TextView(context).apply {
            textSize = 12f
            setPadding(24, 12, 24, 12)
            setBackgroundColor(Color.parseColor("#E3F2FD"))
            setTextColor(Color.parseColor("#1976D2"))
        }

        titleLayout.addView(titleText)
        titleLayout.addView(userTypeIndicator)

        // Ïõî/ÎÖÑ ÌëúÏãúÏôÄ Ïò§Îäò Î≤ÑÌäº
        val controlLayout = LinearLayout(context).apply {
            orientation = LinearLayout.HORIZONTAL
            gravity = Gravity.CENTER_VERTICAL
            setPadding(0, 24, 0, 0)
        }

        monthYearText = TextView(context).apply {
            textSize = 18f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setTextColor(Color.parseColor("#424242"))
            layoutParams = LinearLayout.LayoutParams(
                0, ViewGroup.LayoutParams.WRAP_CONTENT, 1f
            )
        }

        todayButton = Button(context).apply {
            text = "Ïò§Îäò"
            textSize = 14f
            setPadding(32, 16, 32, 16)
            setBackgroundColor(Color.parseColor("#1976D2"))
            setTextColor(Color.WHITE)
        }

        controlLayout.addView(monthYearText)
        controlLayout.addView(todayButton)

        headerLayout.addView(titleLayout)
        headerLayout.addView(controlLayout)
        headerCard.addView(headerLayout)

        return headerCard
    }

    private fun createCalendarContainer(): View {
        val context = requireContext()

        val calendarCard = androidx.cardview.widget.CardView(context).apply {
            layoutParams = ViewGroup.MarginLayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.WRAP_CONTENT
            ).apply {
                setMargins(24, 16, 24, 16)
            }
            radius = 16f
            cardElevation = 6f
            setCardBackgroundColor(Color.WHITE)
        }

        calendarView = CalendarView(context).apply {
            setPadding(32, 32, 32, 32)
        }

        calendarCard.addView(calendarView)
        return calendarCard
    }

    private fun createSelectedDateInfo(): View {
        val context = requireContext()

        val infoCard = androidx.cardview.widget.CardView(context).apply {
            layoutParams = ViewGroup.MarginLayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.WRAP_CONTENT
            ).apply {
                setMargins(24, 0, 24, 16)
            }
            radius = 16f
            cardElevation = 4f
            setCardBackgroundColor(Color.WHITE)
        }

        val infoLayout = LinearLayout(context).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(32, 24, 32, 24)
        }

        val selectedDateText = TextView(context).apply {
            text = "üìÖ ÏÑ†ÌÉùÎêú ÎÇ†Ïßú: ${SimpleDateFormat("yyyyÎÖÑ MMÏõî ddÏùº", Locale.KOREAN).format(selectedDate.time)}"
            textSize = 16f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setTextColor(Color.parseColor("#212121"))
            tag = "selectedDateText"
        }

        val statsLayout = LinearLayout(context).apply {
            orientation = LinearLayout.HORIZONTAL
            setPadding(0, 16, 0, 0)
        }

        val spendingChip = Chip(context).apply {
            text = "üí∞ ÏßÄÏ∂ú: 0Ïõê"
            chipBackgroundColor = android.content.res.ColorStateList.valueOf(Color.parseColor("#FFE0B2"))
            setTextColor(Color.parseColor("#E65100"))
            tag = "spendingChip"
        }

        val eventsChip = Chip(context).apply {
            text = "üìã ÏùºÏ†ï: 0Í∞ú"
            chipBackgroundColor = android.content.res.ColorStateList.valueOf(Color.parseColor("#E3F2FD"))
            setTextColor(Color.parseColor("#1976D2"))
            tag = "eventsChip"
        }

        statsLayout.addView(spendingChip)
        statsLayout.addView(eventsChip)

        infoLayout.addView(selectedDateText)
        infoLayout.addView(statsLayout)
        infoCard.addView(infoLayout)

        return infoCard
    }

    private fun createEventsSection(): View {
        val context = requireContext()

        val eventsCard = androidx.cardview.widget.CardView(context).apply {
            layoutParams = ViewGroup.MarginLayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                800 // Í≥†Ï†ï ÎÜíÏù¥
            ).apply {
                setMargins(24, 0, 24, 24)
            }
            radius = 16f
            cardElevation = 4f
            setCardBackgroundColor(Color.WHITE)
        }

        val eventsLayout = LinearLayout(context).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(32, 24, 32, 24)
        }

        val sectionTitle = TextView(context).apply {
            text = "üìã ÏùºÏ†ï Î∞è ÏßÄÏ∂ú ÎÇ¥Ïó≠"
            textSize = 18f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setTextColor(Color.parseColor("#212121"))
            setPadding(0, 0, 0, 24)
        }

        eventsRecyclerView = RecyclerView(context).apply {
            layoutParams = LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                0,
                1f
            )
        }

        eventsLayout.addView(sectionTitle)
        eventsLayout.addView(eventsRecyclerView)
        eventsCard.addView(eventsLayout)

        return eventsCard
    }

    private fun initializeComponents() {
        // ÌÉúÍ∑∏Î°ú Î∑∞ Ï∞æÍ∏∞
        monthYearText = rootView.findViewWithTag("selectedDateText") ?: monthYearText
    }

    private fun checkUserType() {
        val googleAccount = GoogleSignIn.getLastSignedInAccount(requireContext())
        isGoogleUser = googleAccount != null

        userTypeIndicator.text = if (isGoogleUser) {
            "üîó Google Ïó∞Îèô"
        } else {
            "üì± Î°úÏª¨ Ï∫òÎ¶∞Îçî"
        }

        if (isGoogleUser) {
            googleCalendarHelper = GoogleCalendarHelper(requireContext(), googleAccount!!)
        }
    }

    private fun setupCalendar() {
        updateMonthYearText()

        calendarView.setOnDateChangeListener { _, year, month, dayOfMonth ->
            selectedDate.set(year, month, dayOfMonth)
            updateSelectedDateInfo()
            loadEventsForSelectedDate()
        }
    }

    private fun setupRecyclerView() {
        eventsAdapter = CalendarEventsAdapter(events) { event ->
            showEventOptionsDialog(event)
        }

        eventsRecyclerView.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = eventsAdapter
        }
    }

    private fun setupEventListeners() {
        todayButton.setOnClickListener {
            selectedDate = Calendar.getInstance()
            calendarView.date = selectedDate.timeInMillis
            updateSelectedDateInfo()
            loadEventsForSelectedDate()
        }

        addEventFab.setOnClickListener {
            showAddEventDialog()
        }
    }

    private fun loadInitialData() {
        loadEventsForSelectedDate()
        loadSpendingData()
    }

    private fun updateMonthYearText() {
        val format = SimpleDateFormat("yyyyÎÖÑ MMÏõî", Locale.KOREAN)
        monthYearText.text = format.format(selectedDate.time)
    }

    private fun updateSelectedDateInfo() {
        val selectedDateText = rootView.findViewWithTag<TextView>("selectedDateText")
        val spendingChip = rootView.findViewWithTag<Chip>("spendingChip")
        val eventsChip = rootView.findViewWithTag<Chip>("eventsChip")

        val format = SimpleDateFormat("yyyyÎÖÑ MMÏõî ddÏùº", Locale.KOREAN)
        selectedDateText?.text = "üìÖ ÏÑ†ÌÉùÎêú ÎÇ†Ïßú: ${format.format(selectedDate.time)}"

        updateMonthYearText()

        // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        val dateKey = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(selectedDate.time)
        val spending = spendingData[dateKey]?.sumOf { it.amount } ?: 0
        val eventCount = events.count {
            SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(it.date.toDate()) == dateKey
        }

        spendingChip?.text = "üí∞ ÏßÄÏ∂ú: ${String.format("%,d", spending)}Ïõê"
        eventsChip?.text = "üìã ÏùºÏ†ï: ${eventCount}Í∞ú"
    }

    private fun loadEventsForSelectedDate() {
        val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return

        val calendar = selectedDate.clone() as Calendar
        calendar.set(Calendar.HOUR_OF_DAY, 0)
        calendar.set(Calendar.MINUTE, 0)
        calendar.set(Calendar.SECOND, 0)
        calendar.set(Calendar.MILLISECOND, 0)
        val startOfDay = Timestamp(calendar.time)

        calendar.add(Calendar.DAY_OF_MONTH, 1)
        val startOfNextDay = Timestamp(calendar.time)

        events.clear()

        // Î°úÏª¨ Ïù¥Î≤§Ìä∏ Î°úÎìú
        db.collection("users").document(uid).collection("events")
            .whereGreaterThanOrEqualTo("date", startOfDay)
            .whereLessThan("date", startOfNextDay)
            .get()
            .addOnSuccessListener { documents ->
                for (doc in documents) {
                    val event = CalendarEvent(
                        id = doc.id,
                        title = doc.getString("title") ?: "",
                        description = doc.getString("description") ?: "",
                        date = doc.getTimestamp("date") ?: Timestamp.now(),
                        type = EventType.LOCAL,
                        category = doc.getString("category") ?: "Í∏∞Î≥∏"
                    )
                    events.add(event)
                }
                eventsAdapter.notifyDataSetChanged()
                updateSelectedDateInfo()
            }

        // Google Ï∫òÎ¶∞Îçî Ïù¥Î≤§Ìä∏ Î°úÎìú (Google ÏÇ¨Ïö©ÏûêÏù∏ Í≤ΩÏö∞)
        if (isGoogleUser) {
            googleCalendarHelper?.loadEventsForDate(selectedDate.time) { googleEvents ->
                for (googleEvent in googleEvents) {
                    events.add(googleEvent)
                }
                eventsAdapter.notifyDataSetChanged()
                updateSelectedDateInfo()
            }
        }

        // ÏßÄÏ∂ú Îç∞Ïù¥ÌÑ∞ÎèÑ Ïù¥Î≤§Ìä∏Î°ú Ï∂îÍ∞Ä
        loadSpendingAsEvents(startOfDay, startOfNextDay)
    }

    private fun loadSpendingAsEvents(startOfDay: Timestamp, startOfNextDay: Timestamp) {
        val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return

        db.collection("users").document(uid).collection("spending")
            .whereGreaterThanOrEqualTo("date", startOfDay)
            .whereLessThan("date", startOfNextDay)
            .get()
            .addOnSuccessListener { documents ->
                for (doc in documents) {
                    val amount = doc.getLong("amount")?.toInt() ?: 0
                    val category = doc.getString("category") ?: "Í∏∞ÌÉÄ"
                    val memo = doc.getString("memo") ?: ""

                    val spendingEvent = CalendarEvent(
                        id = doc.id,
                        title = "üí∞ ${category} - ${String.format("%,d", amount)}Ïõê",
                        description = memo,
                        date = doc.getTimestamp("date") ?: Timestamp.now(),
                        type = EventType.SPENDING,
                        category = category
                    )
                    events.add(spendingEvent)
                }
                eventsAdapter.notifyDataSetChanged()
                updateSelectedDateInfo()
            }
    }

    private fun loadSpendingData() {
        val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return

        db.collection("users").document(uid).collection("spending")
            .get()
            .addOnSuccessListener { documents ->
                spendingData.clear()
                for (doc in documents) {
                    val date = doc.getTimestamp("date")?.toDate() ?: continue
                    val dateKey = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(date)

                    val spending = SpendingData(
                        amount = doc.getLong("amount")?.toInt() ?: 0,
                        category = doc.getString("category") ?: "",
                        memo = doc.getString("memo") ?: ""
                    )

                    if (spendingData[dateKey] == null) {
                        spendingData[dateKey] = mutableListOf()
                    }
                    (spendingData[dateKey] as MutableList).add(spending)
                }
                updateSelectedDateInfo()
            }
    }

    private fun showAddEventDialog() {
        val context = requireContext()

        val layout = LinearLayout(context).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(50, 50, 50, 50)
        }

        // Ï†úÎ™©
        val titleLabel = TextView(context).apply {
            text = "ÏùºÏ†ï Ï†úÎ™©"
            textSize = 16f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setPadding(0, 0, 0, 16)
        }

        val titleInput = EditText(context).apply {
            hint = "ÏùºÏ†ï Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            setPadding(24, 24, 24, 24)
            setBackgroundColor(Color.parseColor("#F5F5F5"))
        }

        // ÏÑ§Î™Ö
        val descLabel = TextView(context).apply {
            text = "ÏÑ§Î™Ö (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
            textSize = 16f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setPadding(0, 32, 0, 16)
        }

        val descInput = EditText(context).apply {
            hint = "ÏùºÏ†ï ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            setPadding(24, 24, 24, 24)
            setBackgroundColor(Color.parseColor("#F5F5F5"))
            maxLines = 3
        }

        // Ïπ¥ÌÖåÍ≥†Î¶¨
        val categoryLabel = TextView(context).apply {
            text = "Ïπ¥ÌÖåÍ≥†Î¶¨"
            textSize = 16f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setPadding(0, 32, 0, 16)
        }

        val categorySpinner = Spinner(context).apply {
            val categories = listOf("ÏóÖÎ¨¥", "Í∞úÏù∏", "ÏïΩÏÜç", "Í∏∞ÎÖêÏùº", "Ïö¥Îèô", "ÌïôÏäµ", "Í∏∞ÌÉÄ")
            val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, categories)
            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
            this.adapter = adapter
        }

        // ÏãúÍ∞Ñ ÏÑ§Ï†ï
        val timeLabel = TextView(context).apply {
            text = "ÏãúÍ∞Ñ ÏÑ§Ï†ï"
            textSize = 16f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setPadding(0, 32, 0, 16)
        }

        var selectedTime = selectedDate.clone() as Calendar
        val timeButton = Button(context).apply {
            text = SimpleDateFormat("HH:mm", Locale.getDefault()).format(selectedTime.time)
            setOnClickListener {
                TimePickerDialog(context, { _, hour, minute ->
                    selectedTime.set(Calendar.HOUR_OF_DAY, hour)
                    selectedTime.set(Calendar.MINUTE, minute)
                    text = SimpleDateFormat("HH:mm", Locale.getDefault()).format(selectedTime.time)
                }, selectedTime.get(Calendar.HOUR_OF_DAY), selectedTime.get(Calendar.MINUTE), true).show()
            }
        }

        layout.addView(titleLabel)
        layout.addView(titleInput)
        layout.addView(descLabel)
        layout.addView(descInput)
        layout.addView(categoryLabel)
        layout.addView(categorySpinner)
        layout.addView(timeLabel)
        layout.addView(timeButton)

        AlertDialog.Builder(context)
            .setTitle("üìÖ ÏÉà ÏùºÏ†ï Ï∂îÍ∞Ä")
            .setView(layout)
            .setPositiveButton("Ï∂îÍ∞Ä") { _, _ ->
                val title = titleInput.text.toString().trim()
                val description = descInput.text.toString().trim()
                val category = categorySpinner.selectedItem.toString()

                if (title.isNotEmpty()) {
                    addNewEvent(title, description, category, Timestamp(selectedTime.time))
                } else {
                    Toast.makeText(context, "Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("Ï∑®ÏÜå", null)
            .show()
    }

    private fun addNewEvent(title: String, description: String, category: String, eventTime: Timestamp) {
        val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return

        val eventData = hashMapOf(
            "title" to title,
            "description" to description,
            "category" to category,
            "date" to eventTime,
            "createdAt" to Timestamp.now()
        )

        if (isGoogleUser) {
            // Google Ï∫òÎ¶∞ÎçîÏóêÎèÑ Ï∂îÍ∞Ä
            googleCalendarHelper?.addEvent(title, description, eventTime.toDate()) { success ->
                if (success) {
                    Toast.makeText(requireContext(), "‚úÖ Google Ï∫òÎ¶∞ÎçîÏóê ÏùºÏ†ïÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!", Toast.LENGTH_SHORT).show()
                }
            }
        }

        // FirestoreÏóê Î°úÏª¨ Ïù¥Î≤§Ìä∏ Ï†ÄÏû•
        db.collection("users").document(uid).collection("events")
            .add(eventData)
            .addOnSuccessListener {
                Toast.makeText(requireContext(), "‚úÖ ÏùºÏ†ïÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!", Toast.LENGTH_SHORT).show()
                loadEventsForSelectedDate()
            }
            .addOnFailureListener { e ->
                Toast.makeText(requireContext(), "‚ùå ÏùºÏ†ï Ï∂îÍ∞Ä Ïã§Ìå®: ${e.message}", Toast.LENGTH_SHORT).show()
            }
    }

    private fun showEventOptionsDialog(event: CalendarEvent) {
        val options = when (event.type) {
            EventType.SPENDING -> arrayOf("üìä ÏÉÅÏÑ∏Î≥¥Í∏∞", "‚úèÔ∏è ÏàòÏ†ï", "üóëÔ∏è ÏÇ≠Ï†ú")
            EventType.GOOGLE -> arrayOf("üìä ÏÉÅÏÑ∏Î≥¥Í∏∞", "üîó GoogleÏóêÏÑú Ïó¥Í∏∞")
            EventType.LOCAL -> arrayOf("üìä ÏÉÅÏÑ∏Î≥¥Í∏∞", "‚úèÔ∏è ÏàòÏ†ï", "üóëÔ∏è ÏÇ≠Ï†ú")
        }

        AlertDialog.Builder(requireContext())
            .setTitle(event.title)
            .setItems(options) { _, which ->
                when (event.type) {
                    EventType.SPENDING -> {
                        when (which) {
                            0 -> showSpendingDetail(event)
                            1 -> editSpending(event)
                            2 -> deleteSpending(event)
                        }
                    }
                    EventType.GOOGLE -> {
                        when (which) {
                            0 -> showEventDetail(event)
                            1 -> openInGoogleCalendar(event)
                        }
                    }
                    EventType.LOCAL -> {
                        when (which) {
                            0 -> showEventDetail(event)
                            1 -> editEvent(event)
                            2 -> deleteEvent(event)
                        }
                    }
                }
            }
            .setNegativeButton("Ï∑®ÏÜå", null)
            .show()
    }

    private fun showEventDetail(event: CalendarEvent) {
        val message = buildString {
            append("üìã Ï†úÎ™©: ${event.title}\n\n")
            if (event.description.isNotEmpty()) {
                append("üìù ÏÑ§Î™Ö: ${event.description}\n\n")
            }
            append("üìÇ Ïπ¥ÌÖåÍ≥†Î¶¨: ${event.category}\n")
            append("üïê ÏãúÍ∞Ñ: ${SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(event.date.toDate())}\n")
            append("üì± ÌÉÄÏûÖ: ${when(event.type) {
                EventType.LOCAL -> "Î°úÏª¨ ÏùºÏ†ï"
                EventType.GOOGLE -> "Google Ï∫òÎ¶∞Îçî"
                EventType.SPENDING -> "ÏßÄÏ∂ú ÎÇ¥Ïó≠"
            }}")
        }

        AlertDialog.Builder(requireContext())
            .setTitle("üìä ÏùºÏ†ï ÏÉÅÏÑ∏Ï†ïÎ≥¥")
            .setMessage(message)
            .setPositiveButton("ÌôïÏù∏", null)
            .show()
    }

    private fun showSpendingDetail(event: CalendarEvent) {
        // ÏßÄÏ∂ú ÏÉÅÏÑ∏Î≥¥Í∏∞ Íµ¨ÌòÑ
        showEventDetail(event)
    }

    private fun editSpending(event: CalendarEvent) {
        // ÏßÄÏ∂ú ÏàòÏ†ï (Í∏∞Ï°¥ SpendingFragment Î°úÏßÅ ÌôúÏö©)
        Toast.makeText(requireContext(), "ÏßÄÏ∂ú ÏàòÏ†ï Í∏∞Îä•", Toast.LENGTH_SHORT).show()
    }

    private fun deleteSpending(event: CalendarEvent) {
        AlertDialog.Builder(requireContext())
            .setTitle("üóëÔ∏è ÏßÄÏ∂ú ÏÇ≠Ï†ú")
            .setMessage("Ïù¥ ÏßÄÏ∂ú ÎÇ¥Ïó≠ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
            .setPositiveButton("ÏÇ≠Ï†ú") { _, _ ->
                val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return@setPositiveButton
                db.collection("users").document(uid).collection("spending")
                    .document(event.id)
                    .delete()
                    .addOnSuccessListener {
                        Toast.makeText(requireContext(), "‚úÖ ÏßÄÏ∂úÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
                        loadEventsForSelectedDate()
                    }
            }
            .setNegativeButton("Ï∑®ÏÜå", null)
            .show()
    }

    private fun editEvent(event: CalendarEvent) {
        // ÏùºÏ†ï ÏàòÏ†ï Íµ¨ÌòÑ
        Toast.makeText(requireContext(), "ÏùºÏ†ï ÏàòÏ†ï Í∏∞Îä•", Toast.LENGTH_SHORT).show()
    }

    private fun deleteEvent(event: CalendarEvent) {
        AlertDialog.Builder(requireContext())
            .setTitle("üóëÔ∏è ÏùºÏ†ï ÏÇ≠Ï†ú")
            .setMessage("Ïù¥ ÏùºÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
            .setPositiveButton("ÏÇ≠Ï†ú") { _, _ ->
                val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return@setPositiveButton
                db.collection("users").document(uid).collection("events")
                    .document(event.id)
                    .delete()
                    .addOnSuccessListener {
                        Toast.makeText(requireContext(), "‚úÖ ÏùºÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
                        loadEventsForSelectedDate()
                    }
            }
            .setNegativeButton("Ï∑®ÏÜå", null)
            .show()
    }

    private fun openInGoogleCalendar(event: CalendarEvent) {
        // Google Ï∫òÎ¶∞ÎçîÏóêÏÑú Ïó¥Í∏∞
        Toast.makeText(requireContext(), "Google Ï∫òÎ¶∞ÎçîÏóêÏÑú Ïó¥Í∏∞", Toast.LENGTH_SHORT).show()
    }
}
